@model Project.Models.PublicationEditViewModel


@using (Html.BeginForm("Edit", "Publications", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    
    <div class="row">
        <div class="col-sm-8">
            <h2>Editar Publicação</h2>
        </div>
        <div class="col-sm-4" style="padding-top:3%;padding-bottom:2%;">
            <div class="pull-right">
                <input type="submit" value="Guardar" class="btn btn-primary" />
                @Html.ActionLink("Voltar às publicações", "Index", routeValues: null ,htmlAttributes: new { @class="btn btn-default" })
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8 col-md-10">
            <div class="container-fluid row">
                <div class="col-xs-12">
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.ID)
                </div>

                @* Title *@
                <div class="col-xs-12">
                    <div class="row">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-3 text-right" })
                        <div class="col-md-9">
                            @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                @* Image *@
                <div class="col-xs-12">
                    <div class="row">
                        <div class="control-label col-md-3 text-right">Alterar Imagem</div>
                        <div class="col-md-9">
                            @if (Model.Image != null)
                            {
                                <img class="img-thumbnail" style="max-height:400px;" id="imgPreview" src="~/fonts/@Url.Content(Model.Image)" />
                            }
                            else
                            {
                                <img class="img-thumbnail" style="max-height:400px;" id="imgPreview" src="" />
                            }
                            @Html.TextBox("file", "", new { type = "file", onchange = "loadFile(event)" })
                        </div>
                    </div>
                </div>

                @* Description *@
                <div class="col-xs-12">
                    <div class="row">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-3 text-right" })
                        <div class="col-md-9">
                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control", style = "height:300px" })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                @* EVENT *@
                <div class="col-xs-12">
                    <div class="row">
                        @Html.LabelFor(model => model.IsEvent, htmlAttributes: new { @class = "control-label col-md-3 text-right" })
                        <div class="col-md-9">
                            <label data-toggle="collapse" data-target=".collapseEvent" aria-expanded="true">
                                @Html.CheckBoxFor(model => model.IsEvent)
                            </label>
                            @Html.ValidationMessageFor(model => model.IsEvent, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                @if (Model.IsEvent)
                {
                    @* Day *@
                    <div class="col-xs-12 collapseEvent collapse in">
                        <div class="row">
                            @Html.LabelFor(model => model.Day, htmlAttributes: new { @class = "control-label col-md-3 text-right" })
                            <div class="col-md-9">
                                @Html.TextBoxFor(model => model.Day, new { @class = "form-control form_datetime" })
                                @Html.ValidationMessageFor(model => model.Day, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    @* Local *@
                    <div class="col-xs-12 collapseEvent collapse in">
                        <div class="row">
                            @Html.LabelFor(model => model.Local, htmlAttributes: new { @class = "control-label col-md-3 text-right" })
                            <div class="col-md-9">
                                @Html.TextBoxFor(model => model.Local, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Local, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    @* Day *@
                    <div class="col-xs-12 collapseEvent collapse">
                        <div class="row">
                            @Html.LabelFor(model => model.Day, htmlAttributes: new { @class = "control-label col-md-3 text-right" })
                            <div class="col-md-9">
                                @Html.TextBoxFor(model => model.Day, new { @class = "form-control form_datetime" })
                                @Html.ValidationMessageFor(model => model.Day, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    @* Local *@
                    <div class="col-xs-12 collapseEvent collapse">
                        <div class="row">
                            @Html.LabelFor(model => model.Local, htmlAttributes: new { @class = "control-label col-md-3 text-right" })
                            <div class="col-md-9">
                                @Html.TextBoxFor(model => model.Local, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Local, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                }

                @* POLL *@
                <div class="col-xs-12">
                    <div class="row">
                        @Html.LabelFor(model => model.IsPoll, htmlAttributes: new { @class = "control-label col-md-3 text-right" })
                        <div class="col-md-9">
                            <label data-toggle="collapse" data-target=".collapsePoll" aria-expanded="true">
                                @Html.CheckBoxFor(model => model.IsPoll)
                            </label>
                            @Html.ValidationMessageFor(model => model.IsPoll, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                @if (Model.IsPoll)
                {
                    @* Matter *@
                    <div class="col-xs-12 collapsePoll collapse in">
                        <div class="row">
                            @Html.LabelFor(model => model.Matter, htmlAttributes: new { @class = "control-label col-md-3 text-right" })
                            <div class="col-md-9">
                                @Html.TextBoxFor(model => model.Matter, new { @class = "form-control", disabled = "disabled" })
                                @Html.ValidationMessageFor(model => model.Matter, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    @* Form *@
                    <div class="col-xs-12 collapsePoll collapse in">
                        <div class="row">
                            @Html.LabelFor(model => model.LinkToForm, htmlAttributes: new { @class = "control-label col-md-3 text-right" })
                            <div class="col-md-9">
                                @Html.TextBoxFor(model => model.LinkToForm, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.LinkToForm, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    @* IsVisible *@
                    <div class="col-xs-12 collapsePoll collapse in">
                        <div class="row">
                            @Html.LabelFor(model => model.IsVisible, htmlAttributes: new { @class = "control-label col-md-3 text-right" })
                            <div class="col-md-9">
                                @Html.CheckBoxFor(model => model.IsVisible)
                                @Html.ValidationMessageFor(model => model.IsVisible, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    @* IsInclusive *@
                    <div class="col-xs-12 collapsePoll collapse in">
                        <div class="row">
                            @Html.LabelFor(model => model.IsInclusive, htmlAttributes: new { @class = "control-label col-md-3 text-right" })
                            <div class="col-md-9">
                                @Html.CheckBoxFor(model => model.IsInclusive)
                                @Html.ValidationMessageFor(model => model.IsInclusive, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    @* Options *@
                    <div class="col-xs-12 collapsePoll collapse in">
                        <div class="row">
                            @Html.LabelFor(model => Model.OptionName, htmlAttributes: new { @class = "control-label col-md-3 text-right" })
                            <div class="col-md-9">
                                <div class="row options">
                                    @for (int i = 0; i < Model.OptionName.Length; i++)
                                    {
                                        <label for="OptionName_@(i)_" class="col-xs-2">Opção @(i + 1) </label>
                                        <div class="col-xs-10">
                                            @Html.TextBoxFor(model => Model.OptionName[i], new { @class = "form-control", disabled = "disabled" })
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    @* Matter *@
                    <div class="col-xs-12 collapsePoll collapse">
                        <div class="row">
                            @Html.LabelFor(model => model.Matter, htmlAttributes: new { @class = "control-label col-md-3 text-right" })
                            <div class="col-md-9">
                                @Html.TextBoxFor(model => model.Matter, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Matter, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    @* Form *@
                    <div class="col-xs-12 collapsePoll collapse">
                        <div class="row">
                            @Html.LabelFor(model => model.LinkToForm, htmlAttributes: new { @class = "control-label col-md-3 text-right" })
                            <div class="col-md-9">
                                @Html.TextBoxFor(model => model.LinkToForm, new { @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.LinkToForm, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    @* IsVisible *@
                    <div class="col-xs-12 collapsePoll collapse">
                        <div class="row">
                            @Html.LabelFor(model => model.IsVisible, htmlAttributes: new { @class = "control-label col-md-3 text-right" })
                            <div class="col-md-9">
                                @Html.CheckBoxFor(model => model.IsVisible)
                                @Html.ValidationMessageFor(model => model.IsVisible, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    @* IsInclusive *@
                    <div class="col-xs-12 collapsePoll collapse">
                        <div class="row">
                            @Html.LabelFor(model => model.IsInclusive, htmlAttributes: new { @class = "control-label col-md-3 text-right" })
                            <div class="col-md-9">
                                @Html.CheckBoxFor(model => model.IsInclusive)
                                @Html.ValidationMessageFor(model => model.IsInclusive, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    @* Options *@
                    <div class="col-xs-12 collapsePoll collapse">
                        <div class="row">
                            @Html.LabelFor(model => Model.OptionName, htmlAttributes: new { @class = "control-label col-md-3 text-right" })
                            <div class="col-md-9">
                                <div class="row" id="options"></div>
                                <a id="btnAddOption" onclick="addOption()" class="btn btn-default">Adicionar Opção</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}


<script>
    $(".form_datetime").datetimepicker({ format: 'yyyy-mm-dd hh:ii' });
    var optionID = 0;
</script>
