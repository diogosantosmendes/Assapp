@model Project.Models.Publication

@* PUBLICATION PROFILE *@
<div style="padding-top:3%;">
    <div class="panel panel-primary">
        <div class="panel-body row">
            @* Creation Date *@
            <div class="col-xs-8 h5"><span class="label label-default">@Html.DisplayFor(model => Model.CreatedIn)</span></div>
            <!-- ///////////////////// falta role //////////////////////////// -->
            @* Edit *@
            <div class="col-xs-4 text-right">@Html.ActionLink("Editar", "Edit", routeValues: new { id = Model.ID }, htmlAttributes: new { @class = "btn btn-default" }) </div>
            @* Title *@
            <div class="col-xs-12 text-center"><h3>@Html.DisplayFor(model => Model.Name)</h3></div>
            @* Event *@
            @if (Model.Event != null)
            {
                <div class="col-xs-12"><br /></div>
                <div class="col-xs-12">
                    <div class="well">
                        <div class="row">

                            @if (Model.Event.Day > DateTime.Now)
                            {
                                @* Day *@
                                <div class="col-xs-12 col-sm-6 text-center">
                                    <label class="h4 text-success"><span class="glyphicon glyphicon-time"></span> @Html.DisplayFor(model => Model.Event.Day)</label>
                                </div>
                                @* Local *@
                                <div class="col-xs-12 col-sm-6 text-center">
                                    <label class="h4 text-success"><span class="glyphicon glyphicon-map-marker"></span> @Html.DisplayFor(model => Model.Event.Local)</label>
                                </div>
                            }
                            else
                            {
                                if (Model.Event.Day.Date == DateTime.Now.Date)
                                {
                                    @* Day *@
                                    <div class="col-xs-12 col-sm-6 text-center">
                                        <label class="h4 text-warning"><span class="glyphicon glyphicon-warning-sign"></span>  O evento será realizado hoje</label>
                                    </div>
                                    @* Local *@
                                    <div class="col-xs-12 col-sm-6 text-center">
                                        <label class="h4 text-success"><span class="glyphicon glyphicon-map-marker"></span> @Html.DisplayFor(model => Model.Event.Local)</label>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-xs-12 text-center">
                                        <label class="h4 text-danger"><span class="glyphicon glyphicon-warning-sign"></span>  O evento já foi realizado</label>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            }
            @* Image *@
            <div class="col-xs-12 text-left h5">
                @if (Model.Image != null)
                {
                    <br />
                    <img src="~/fonts/@Url.Content(Model.Image)" class="img-thumbnail" style="max-height:400px;float: left;margin-right: 20px;" />
                }
                @* Description *@
                @Html.DisplayFor(model => Model.Description)
            </div>

            @* Poll *@
            <!-- ///////////////////// falta role //////////////////////////// -->
            @if (Model.Poll != null)
            {
                <div class="col-xs-12"><br /></div>
                <div class="col-xs-12">
                    <div class="panel panel-default">
                        <div class="panel-body">
                            <div class="row">
                                @* Finish the poll *@
                                @if (!Model.Poll.IsFinished)
                                {
                                    <div class="col-sm-offset-8 col-sm-4 text-right">
                                        @using (Ajax.BeginForm("ClosePoll", "Publications", new AjaxOptions { HttpMethod = "Post", OnSuccess = "closeSuccess" }))
                                        {
                                            @Html.AntiForgeryToken()
                                            @Html.Hidden(name: "pollID", value: Model.PollFK)
                                            <input type="submit" value="Encerrar votação" class="btn btn-warning" />
                                        }
                                    </div>
                                }
                            </div>
                            <div class="row text-center">
                                @if (!Model.Poll.IsFinished)
                                {
                                    @* Matter / Link to external form *@
                                    <div class="col-sm-12 text-center">
                                        @if (Model.Poll.LinkToForm != null)
                                        {
                                            <div class="col-xs-12"><br /></div>
                                            <a href="@Model.Poll.LinkToForm" target="_blank" class="btn btn-primary">
                                                <i class="glyphicon glyphicon-list"></i>
                                                <div class="h5 text-capitalize" style="white-space: pre-wrap;">@Html.DisplayFor(model => Model.Poll.Matter)</div>
                                            </a>
                                        }
                                        else
                                        {
                                            <label class="h4 text-primary"><span class="glyphicon glyphicon-list"></span> @Html.DisplayFor(model => Model.Poll.Matter)</label>
                                        }
                                    </div>
                                    @* Vote *@
                                using (Ajax.BeginForm("Vote", "Publications", new AjaxOptions { HttpMethod = "Post", OnSuccess = "voteSuccess" }))
                                {
                                    @Html.AntiForgeryToken()
                                    <div class="col-xs-12 col-md-6 col-lg-4 text-right" style="padding-top:20px;">
                                        @foreach (var choice in Model.Poll.Options)
                                        {
                                            @Html.DisplayFor(model => choice.Name)
                                            <label> - </label>
                                            @Html.RadioButton("optionID", choice.ID)
                                            <br />
                                        }
                                        @Html.Hidden(name: "pollID", value: Model.Poll.ID)
                                        <input type="submit" value="Votar" class="btn btn-default" />
                                    </div>
                                    }
                                }
                                else
                                {
                                    <div class="col-xs-12 text-center">
                                        <h5 class="text-danger">Terminou o tempo de votação</h5>
                                        <h4 class="text-primary"><span class="glyphicon glyphicon-list"></span> @Html.DisplayFor(model => Model.Poll.Matter)</h4>
                                    </div>
                                }
                                <div class="col-lg-2"></div>
                                @* Statistics *@
                                <div class="col-xs-12 col-md-6 col-lg-8">
                                    <!-- ///////////////////// falta role //////////////////////////// -->
                                    @if (Model.Poll.IsVisible)
                                    {
                                        int count = 0;
                                        Model.Poll.Options.ToList().ForEach(x => count += x.Count);
                                        if (count > 0)
                                        {
                                            <canvas id="@string.Format("statistic{0}", Model.ID)" width="350" height="200"></canvas>
                                                <script>
                                                var obj = [];
                                                @{
                                                    foreach (var choice in Model.Poll.Options)
                                                    {
                                                        @:obj.push({ value: @choice.Count , name: "@Html.Raw(choice.Name)" });
                                                    }
                                                }
                                                donutChart("@string.Format("statistic{0}", Model.ID)", obj);
                                                </script>
        }

    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
    }
            <!-- ///////////////////// falta role //////////////////////////// -->
            @* Discussion *@
            <div class="col-xs-12">
                <div class="well">
                    <div class="text-center"><h4>Discussão</h4></div>
                    <div id="@string.Format("discussion{0}", Model.ID)">
                        @foreach (var opinion in Model.Replies)
                        {

                            if (opinion.IsVisible || User.IsInRole("collaborator"))
                            {
                                <div class="row container-fluid">

                                    <div class="col-sm-2 text-right">
                                        <span class="label label-default">@Html.DisplayFor(model => opinion.Hour)</span><br />@Html.DisplayFor(model => opinion.User.Name)
                                    </div>
                                    <div class="col-sm-9">
                                        <h6>@Html.DisplayFor(model => opinion.Content)</h6>
                                    </div>
                                    <div class="col-sm-1">
                                        <!--  ////////////// falta role  /////////////////-->
                                        @using (Ajax.BeginForm("Censor", "Publications", new AjaxOptions { HttpMethod = "Post", OnSuccess = "censorSuccess" }))
                                        {
                                            @Html.AntiForgeryToken()
                                            @Html.Hidden(name: "replyID", value: opinion.ID, htmlAttributes: new { @class = "center" })
                                            if (opinion.IsVisible)
                                            {
                                                <button type="submit" value="Censurar" class="btn btn-success"><span class="glyphicon glyphicon-ok-sign"></span></button>
                                            }
                                            else
                                            {
                                                <button type="submit" value="Retirar censura" class="btn btn-danger"><span class="glyphicon glyphicon-remove-sign"></span></button>
                                            }
                                        }
                                    </div>
                                </div>
                            }
                        }
                        <br />
                        @* Coment *@
                        @using (Ajax.BeginForm("Comment", "Publications", new AjaxOptions { HttpMethod = "Post", OnSuccess = "commentSuccess" }))
                        {
                            @Html.AntiForgeryToken()
                            <div class="text-center">
                                @Html.TextArea(name: "Text", htmlAttributes: new { @id = "commentTextArea", @style = "width:100%; border:2px solid royalblue; border-radius: 5px;" })
                                @Html.Hidden(name: "PublicationID", value: Model.ID)
                                @Html.Hidden(name: "PublicationName", value: Model.Name)
                                <input type="submit" value="Comentar" class="btn btn-default" />
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="col-xs-12"><br /></div>
        </div>
    </div>
</div>